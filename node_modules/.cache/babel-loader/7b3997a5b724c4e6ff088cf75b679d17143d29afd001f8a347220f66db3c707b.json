{"ast":null,"code":"import { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-J637PuKfmIhVojPPLFzY5k-qIfp4FGg\",\n  authDomain: \"clothing-crwn-db-ffda0.firebaseapp.com\",\n  projectId: \"clothing-crwn-db-ffda0\",\n  storageBucket: \"clothing-crwn-db-ffda0.appspot.com\",\n  messagingSenderId: \"351902083825\",\n  appId: \"1:351902083825:web:3c08563c533941b0399750\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('Error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const SignOutUser = async () => signOut(auth);\n_c = SignOutUser;\nexport const OnAuthChangeListener = callback => onAuthStateChanged(auth, callback);\n_c2 = OnAuthChangeListener;\nvar _c, _c2;\n$RefreshReg$(_c, \"SignOutUser\");\n$RefreshReg$(_c2, \"OnAuthChangeListener\");","map":{"version":3,"names":["getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","setDoc","getDoc","initializeApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","SignOutUser","_c","OnAuthChangeListener","callback","_c2","$RefreshReg$"],"sources":["/Users/bibekluitel/clothing-crwn/Clothing-store-react-project/src/utils/firebase/firebase.utils.js"],"sourcesContent":["\nimport {\n    getAuth,\n    signInWithPopup, \n    GoogleAuthProvider, \n    createUserWithEmailAndPassword, \n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged}\n     from 'firebase/auth';\nimport { getFirestore,doc, setDoc, getDoc} from 'firebase/firestore'\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-J637PuKfmIhVojPPLFzY5k-qIfp4FGg\",\n  authDomain: \"clothing-crwn-db-ffda0.firebaseapp.com\",\n  projectId: \"clothing-crwn-db-ffda0\",\n  storageBucket: \"clothing-crwn-db-ffda0.appspot.com\",\n  messagingSenderId: \"351902083825\",\n  appId: \"1:351902083825:web:3c08563c533941b0399750\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    console.log(userDocRef);\n    const userSnapshot = await getDoc(userDocRef);\n    console.log(userSnapshot);\n    console.log(userSnapshot.exists());\n\n    if(!userSnapshot.exists()){ \n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                    ...additionalInformation\n            })\n        }catch(error){\n            console.log('Error creating the user', error.message);\n        }\n    }\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password) return;\n    return await createUserWithEmailAndPassword(auth, email, password);\n}\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password) return;\n    return await signInWithEmailAndPassword(auth, email, password);\n}\n\nexport const SignOutUser = async() => signOut(auth);\n\nexport const OnAuthChangeListener = (callback) => onAuthStateChanged(auth, callback);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}