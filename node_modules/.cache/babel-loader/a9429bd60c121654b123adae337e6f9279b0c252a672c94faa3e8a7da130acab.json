{"ast":null,"code":"import { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-J637PuKfmIhVojPPLFzY5k-qIfp4FGg\",\n  authDomain: \"clothing-crwn-db-ffda0.firebaseapp.com\",\n  projectId: \"clothing-crwn-db-ffda0\",\n  storageBucket: \"clothing-crwn-db-ffda0.appspot.com\",\n  messagingSenderId: \"351902083825\",\n  appId: \"1:351902083825:web:3c08563c533941b0399750\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('Error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};","map":{"version":3,"names":["getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","setDoc","getDoc","initializeApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"sources":["/Users/bibekluitel/clothing-crwn/Clothing-store-react-project/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import {getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider} from 'firebase/auth';\nimport { getFirestore,doc, setDoc, getDoc} from 'firebase/firestore'\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-J637PuKfmIhVojPPLFzY5k-qIfp4FGg\",\n  authDomain: \"clothing-crwn-db-ffda0.firebaseapp.com\",\n  projectId: \"clothing-crwn-db-ffda0\",\n  storageBucket: \"clothing-crwn-db-ffda0.appspot.com\",\n  messagingSenderId: \"351902083825\",\n  appId: \"1:351902083825:web:3c08563c533941b0399750\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    console.log(userDocRef);\n    const userSnapshot = await getDoc(userDocRef);\n    console.log(userSnapshot);\n    console.log(userSnapshot.exists());\n\n    if(!userSnapshot.exists()){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt\n            })\n        }catch(error){\n            console.log('Error creating the user', error.message);\n        }\n    }\n    return userDocRef;\n}"],"mappings":"AAAA,SAAQA,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,kBAAkB,QAAO,eAAe;AAC9F,SAASC,YAAY,EAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAO,oBAAoB;AACpE;AACA,SAASC,aAAa,QAAQ,cAAc;AAC5C;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGR,aAAa,CAACC,cAAc,CAAC;AACjD,MAAMQ,QAAQ,GAAG,IAAId,kBAAkB,EAAE;AACzCc,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAAE;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAACkB,IAAI,EAAEH,QAAQ,CAAC;AAE1E,OAAO,MAAMK,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EACvB,MAAMI,YAAY,GAAG,MAAMtB,MAAM,CAACkB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzBF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,EAAE,CAAC;EAElC,IAAG,CAACD,YAAY,CAACC,MAAM,EAAE,EAAC;IACtB,MAAM;MAACC,WAAW;MAAEC;IAAK,CAAC,GAAGR,QAAQ;IACrC,MAAMS,SAAS,GAAG,IAAIC,IAAI,EAAE;IAC5B,IAAG;MACC,MAAM5B,MAAM,CAACmB,UAAU,EAAE;QACrBM,WAAW;QACXC,KAAK;QACLC;MACJ,CAAC,CAAC;IACN,CAAC,QAAME,KAAK,EAAC;MACTR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;IACzD;EACJ;EACA,OAAOX,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}